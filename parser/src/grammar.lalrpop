// vi: ft=rust
use std::str::FromStr;
use crate::{
    pos::{self, BytePos, HasSpan, Spanned},
    ast::*,
};

grammar;

// A bunch of macros.

Sp<Rule>: Spanned<Rule, BytePos> =
    <l: @L> <rule: Rule> <r: @R> =>
        pos::spanned2(l, r, rule);

Semi<T>: Vec<T> = {
    <v:(<T> ";")*> <e:T?> => match e {
        None=> v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

// Comma-delimited with minimum zero elements.
Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None=> v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

// Comma-delimited with minimum one element.
CommaOnce<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T> => {
        let mut v = v;
        v.push(e);
        v
    },
};

Pipe<T>: Vec<T> = {
    <v:(<T> "|")*> <e:T?> => match e {
        None=> v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

// Common patterns.

Quote: String = {
    r#""[^"]*""# => {
      let a = <>;
      a[1..a.len()-1].to_string()
    }
};

SingleQuote: String = {
    r"'[^']*'" => {
      let a = <>;
      a[1..a.len()-1].to_string()
    }
};

// Note: we only have signed integers for now.
Int: i64 = {
    r"0x[0-9A-Fa-f_]+" => i64::from_str_radix(&str::replace(&<>[2..], "_", ""), 16).unwrap(),
    r"0b[01_]+" => i64::from_str_radix(&str::replace(&<>[2..], "_", ""), 2).unwrap(),
    r"-?[0-9_]+" => i64::from_str(&str::replace(<>, "_", "")).unwrap(),
};

pub Expr: Expr = {
    // LetExpr
    OpExpr => *<>
};

// Operator precedence or, and, eq, compare (<, <=, >, >=), pipe, add (+, -, +.? -.?), factor (*, /)
//
// strong to weak
// ?
// unary -/*/!/&/&mut
// * / %
// + -
// << >>
// &
// ^
// |
// == != < > <= >= needs parens
// &&
// ||
// .. ..=
// = += -= *= /= %= &= |= ^= <<= >>= right to left

Tier<Op,NextTier>: Box<Expr> = {
    Tier<Op,NextTier> Op NextTier => Box::new(Expr::Op(<>)),
    NextTier
};

OpExpr = Tier<OrOp, And>;
And = Tier<AndOp, Cmp>;
Cmp = Tier<CmpOp, Bor>;
// TODO: Bxor
Bor = Tier<BorOp, Band>;
Band = Tier<BandOp, Arith>;
// TODO: Shift
Arith = Tier<ArithOp, Factor>;
Factor = Tier<FactorOp, Term>;
// TODO: unary

UnaryOp: Opcode = {
    "!" => Opcode::Not,
};

FactorOp: Opcode = {
    "*" => Opcode::Mul,
    "/" => Opcode::Div,
};

ArithOp: Opcode = { // (3)
    "+" => Opcode::Add,
    "-" => Opcode::Sub,
};

BandOp: Opcode = {
    "&" => Opcode::Band,
};

BorOp: Opcode = {
    "|" => Opcode::Bor,
};

CmpOp: Opcode = {
    "==" => Opcode::Equal,
    "!=" => Opcode::NotEqual,
    "<" => Opcode::Less,
    ">" => Opcode::Greater,
    "<=" => Opcode::LessEqual,
    ">=" => Opcode::GreaterEqual,
};

AndOp: Opcode = {
    "&&" => Opcode::And,
};

OrOp: Opcode = {
    "||" => Opcode::Or,
};

Term: Box<Expr> = {
    Literal => Box::new(Expr::Literal(<>))
};

// TODO: shift assign

pub Literal: Literal = {
    // string,
    // char,
    Int => Literal::Int(<>),
    // byte,
    // float
};
