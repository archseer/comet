// vi: ft=rust
use std::str::FromStr;
use crate::{
    lexer::{Token, LexerError},
    symbol::Symbol,
    parser::ParseError,
    diagnostics::{self, Spanned},
    ast::*,
};
use codespan::ByteIndex;

// grammar<'err>(errors: &'err mut Vec<lalrpop_util::ParseError<usize, Token<'input>, parser::Error>>);
grammar<'err>(
    errors: &'err mut Vec<ParseError>,
);

extern {
    type Location = ByteIndex;
    type Error = ParseError; // Spanned<ParseError>

    enum Token {
         "identifier" => Token::Ident(<Symbol>),
         "doc comment" => Token::DocComment(<String>),
         // "operator" => Token::Operator(<Symbol>),
         "string literal" => Token::StringLiteral(<String>),
         "char literal" => Token::CharLiteral(<char>),
         "bin int literal" => Token::BinIntLiteral(<i64>),
         "oct int literal" => Token::OctIntLiteral(<i64>),
         "dec int literal" => Token::DecIntLiteral(<i64>),
         "hex int literal" => Token::HexIntLiteral(<i64>),
         // "byte literal" => Token::ByteLiteral(<u8>),
         "float literal" => Token::DecFloatLiteral(<f64>),

         "else" => Token::Else,
         "if" => Token::If,
         "in" => Token::In,
         "let" => Token::Let,
         "fn" => Token::Fn,
         "match" => Token::Match,
         "type" => Token::Type,
         "true" => Token::True,
         "false" => Token::False,

         "+" => Token::Plus,
         "-" => Token::Minus,
         "*" => Token::Star,
         "/" => Token::Slash,
         "\\" => Token::BSlash,
         "%" => Token::Percent,
         "^" => Token::Caret,
         "!" => Token::Not,
         "&" => Token::And,
         "|" => Token::Or,
         "&&" => Token::AndAnd,
         "||" => Token::OrOr,
         "=" => Token::Eq,
         "==" => Token::EqEq,
         "!=" => Token::Ne,
         ">" => Token::Gt,
         "<" => Token::Lt,
         ">=" => Token::Ge,
         "<=" => Token::Le,
         "@" => Token::At,
         "_" => Token::Underscore,
         "." => Token::Dot,
         ".." => Token::DotDot,
         "..." => Token::DotDotDot,
         "," => Token::Comma,
         ";" => Token::Semi,
         ":" => Token::Colon,
         "::" => Token::PathSep,
         "->" => Token::RArrow,
         "=>" => Token::FatArrow,
         "?" => Token::Question,

         "{" => Token::LBrace,
         "[" => Token::LBracket,
         "(" => Token::LParen,

         "}" => Token::RBrace,
         "]" => Token::RBracket,
         ")" => Token::RParen,
    }
}

// A bunch of macros.

// Sp<Rule>: Spanned<Rule> =
//     <l: @L> <rule: Rule> <r: @R> =>
//         diagnostics::spanned2(l, r, rule);

Semi<T>: Vec<T> = {
    <v:(<T> ";")*> <e:T?> => match e {
        None=> v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

// Comma-delimited with minimum zero elements.
Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None=> v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

// Comma-delimited with minimum one element.
CommaOnce<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T> => {
        let mut v = v;
        v.push(e);
        v
    },
};

Pipe<T>: Vec<T> = {
    <v:(<T> "|")*> <e:T?> => match e {
        None=> v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

//// Common patterns.

Ident: Ident = {
    "identifier" => Ident(<>),
};

// Note: we only have signed integers for now.
Int: i64 = {
    "bin int literal" => <>,
    "oct int literal" => <>,
    "dec int literal" => <>,
    "hex int literal" => <>,
};

Bool: bool = {
    "true" => true,
    "false" => false,
}

//// Statement: var definition or expression

pub Module: Module = {
    Statement* => Module {
        statements: <>,
    }
}

Block: Vec<Expr> = {
    "{" <Expr*> "}"
}

FnStatement: Statement = {
    "fn" <i:Ident> "(" <a:Comma<Expr>> ")" <e:Block> => Statement::Fn {
        name: i,
        args: a,
        body: e,
    },
};


pub Statement: Statement = {
    FnStatement,
    Expr => Statement::Expression(<>),
};

LetExpr: Expr = {
    // let x = 1
    "let" <i:Ident> "=" <e:Expr> => Expr::Let {
        name: i,
        ty: None,
        value: Box::new(e),
    },

    // let x : int = 1
    "let" <i:Ident> ":" <t:Ident> "=" <e:Expr> => Expr::Let {
        name: i,
        ty: Some(t),
        value: Box::new(e),
    }
}

 IfExpr: Expr = {
     "if" <cond:OpExpr> <i:Block> "else" <e:Block> => Expr::If (
         Box::new(cond),
         i,
         e,
     ),
 }

 pub Expr: Expr = {
     OpExpr,
     LetExpr,
     LambdaExpr,
     IfExpr,
 };

CallExpr: Expr = {
    // <i:Ident> "()" => Expr::Call{
    //     name: i,
    //     args: Vec::new(),
    // },

    <i:Ident> "(" <a:Comma<OpExpr>> ")" => Expr::Call{
        name: i,
        args: a,
    }
};

LambdaExpr: Expr = {
    "fn" "(" <a:Comma<Ident>> ")" <e:Block> => Expr::Lambda {
        args: a,
        body: e,
    },
};

// Operator precedence or, and, eq, compare (<, <=, >, >=), pipe, add (+, -, +.? -.?), factor (*, /)
//
// strong to weak
// ?
// unary -/*/!/&/&mut
// * / %
// + -
// << >>
// &
// ^
// |
// == != < > <= >= needs parens
// &&
// ||
// .. ..=
// = += -= *= /= %= &= |= ^= <<= >>= right to left

Tier<Op,NextTier>: Expr = {
    <l:Tier<Op,NextTier>> <op:Op> <r:NextTier> => Expr::Op(Box::new(l), op, Box::new(r)),
    NextTier => <>
};

OpExpr = Tier<OrOp, And>;
And = Tier<AndOp, Cmp>;
Cmp = Tier<CmpOp, Bor>;
// TODO: Bxor
Bor = Tier<BorOp, Band>;
Band = Tier<BandOp, Arith>;
// TODO: Shift
Arith = Tier<ArithOp, Factor>;
Factor = Tier<FactorOp, Term>;
// TODO: unary

UnaryOp: Opcode = {
    "!" => Opcode::Not,
};

FactorOp: Opcode = {
    "*" => Opcode::Mul,
    "/" => Opcode::Div,
};

ArithOp: Opcode = { // (3)
    "+" => Opcode::Add,
    "-" => Opcode::Sub,
};

BandOp: Opcode = {
    "&" => Opcode::Band,
};

BorOp: Opcode = {
    "|" => Opcode::Bor,
};

CmpOp: Opcode = {
    "==" => Opcode::Equal,
    "!=" => Opcode::NotEqual,
    "<" => Opcode::Less,
    ">" => Opcode::Greater,
    "<=" => Opcode::LessEqual,
    ">=" => Opcode::GreaterEqual,
};

AndOp: Opcode = {
    "&&" => Opcode::And,
};

OrOp: Opcode = {
    "||" => Opcode::Or,
};

// ExprProjection => select(record field), apply, lambda (decl) or AtomExpr
Term: Expr = {
    CallExpr => <>,
    AtomExpr => <>,
};

// TODO: shift assign

 AtomExpr: Expr = {
     // symbol
     Ident => Expr::Var(<>),
      // "()" => Expr::Unit,

     Int => Expr::Int(<>),
     Bool => Expr::Bool(<>),

     // "(" <Expr> ")",
     // float
     // string,
     // char,
     // tuple
     // record
     // byte,
     // ! => { errors.push(<>.error); ast::Expression::Unknown },
 };
